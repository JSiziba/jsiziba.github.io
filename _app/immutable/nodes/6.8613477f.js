import{s as Jt,e as Fe,i as Re,B as Lt,d as c,C as Yt,K as Zt,E as Ft,L as Gt,f as o,l as R,a as u,g as s,h as d,m as B,c as h,j as f,v as e,w as $t,M as en,n as Ht,N as tn,A as nn,O as ln,P as an,F as on,u as b}from"../chunks/scheduler.083d7a95.js";import{S as Qt,i as Xt,b as V,d as J,m as Q,a as X,t as Y,e as Z}from"../chunks/index.a8a9562f.js";import{s as sn}from"../chunks/ProgressBar.svelte_svelte_type_style_lang.f2e3c7df.js";function rn(i,n){if(!window.isSecureContext){console.error("Clipboard action failed: app not running in secure context, see: https://developer.mozilla.org/en-US/docs/Web/API/Clipboard");return}const t=()=>{i.dispatchEvent(new CustomEvent("copyComplete"))},l=()=>{if(typeof n=="object"){if("element"in n){const r=document.querySelector(`[data-clipboard="${n.element}"]`);if(!r)throw new Error(`Missing HTMLElement with an attribute of [data-clipboard="${n.element}"]`);Et(r.innerHTML,"text/html").then(t);return}if("input"in n){const r=document.querySelector(`[data-clipboard="${n.input}"]`);if(!r)throw new Error(`Missing HTMLInputElement with an attribute of [data-clipboard="${n.input}"]`);Et(r.value).then(t);return}}Et(n).then(t)};return i.addEventListener("click",l),{update(r){n=r},destroy(){i.removeEventListener("click",l)}}}async function Et(i,n="text/plain"){navigator.clipboard.write?await navigator.clipboard.write([new ClipboardItem({[n]:new Blob([i],{type:n}),"text/plain":new Blob([i],{type:"text/plain"})})]):await new Promise(t=>{t(navigator.clipboard.writeText(String(i)))})}function Kt(i){let n,t,l,r=Vt(i[0])+"",z,N,g,y=(i[7]?i[4]:i[3])+"",P,I,p,k,H,x,E,W,q,w;function L(a,C){return a[6]?un:cn}let O=L(i),_=O(i);return{c(){n=o("div"),t=o("header"),l=o("span"),z=R(r),N=u(),g=o("button"),P=R(y),k=u(),H=o("pre"),x=o("code"),_.c(),this.h()},l(a){n=s(a,"DIV",{class:!0,"data-testid":!0});var C=d(n);t=s(C,"HEADER",{class:!0});var T=d(t);l=s(T,"SPAN",{class:!0});var de=d(l);z=B(de,r),de.forEach(c),N=h(T),g=s(T,"BUTTON",{class:!0});var A=d(g);P=B(A,y),A.forEach(c),T.forEach(c),k=h(C),H=s(C,"PRE",{class:!0});var D=d(H);x=s(D,"CODE",{class:!0});var Be=d(x);_.l(Be),Be.forEach(c),D.forEach(c),C.forEach(c),this.h()},h(){f(l,"class","codeblock-language"),f(g,"class",I="codeblock-btn "+i[2]),f(t,"class","codeblock-header "+dn),f(x,"class",E="codeblock-code language-"+i[0]+" lineNumbers"),f(H,"class","codeblock-pre "+fn),f(n,"class",W="codeblock "+i[8]),f(n,"data-testid","codeblock")},m(a,C){Re(a,n,C),e(n,t),e(t,l),e(l,z),e(t,N),e(t,g),e(g,P),e(n,k),e(n,H),e(H,x),_.m(x,null),q||(w=[$t(g,"click",i[9]),en(p=rn.call(null,g,i[1]))],q=!0)},p(a,C){C&1&&r!==(r=Vt(a[0])+"")&&Ht(z,r),C&152&&y!==(y=(a[7]?a[4]:a[3])+"")&&Ht(P,y),C&4&&I!==(I="codeblock-btn "+a[2])&&f(g,"class",I),p&&tn(p.update)&&C&2&&p.update.call(null,a[1]),O===(O=L(a))&&_?_.p(a,C):(_.d(1),_=O(a),_&&(_.c(),_.m(x,null))),C&1&&E!==(E="codeblock-code language-"+a[0]+" lineNumbers")&&f(x,"class",E),C&256&&W!==(W="codeblock "+a[8])&&f(n,"class",W)},d(a){a&&c(n),_.d(),q=!1,nn(w)}}}function cn(i){let n=i[1].trim()+"",t;return{c(){t=R(n)},l(l){t=B(l,n)},m(l,r){Re(l,t,r)},p(l,r){r&2&&n!==(n=l[1].trim()+"")&&Ht(t,n)},d(l){l&&c(t)}}}function un(i){let n,t;return{c(){n=new ln(!1),t=Fe(),this.h()},l(l){n=an(l,!1),t=Fe(),this.h()},h(){n.a=t},m(l,r){n.m(i[5],l,r),Re(l,t,r)},p(l,r){r&32&&n.p(l[5])},d(l){l&&(c(t),n.d())}}}function hn(i){let n,t=i[0]&&i[1]&&Kt(i);return{c(){t&&t.c(),n=Fe()},l(l){t&&t.l(l),n=Fe()},m(l,r){t&&t.m(l,r),Re(l,n,r)},p(l,[r]){l[0]&&l[1]?t?t.p(l,r):(t=Kt(l),t.c(),t.m(n.parentNode,n)):t&&(t.d(1),t=null)},i:Lt,o:Lt,d(l){l&&c(n),t&&t.d(l)}}}const mn="overflow-hidden shadow",dn="text-xs text-white/50 uppercase flex justify-between items-center p-2 pl-4",fn="whitespace-pre-wrap break-all p-4 pt-1";function Vt(i){return i==="js"?"javascript":i==="ts"?"typescript":i==="shell"?"terminal":i}function gn(i,n,t){let l,r;Yt(i,sn,a=>t(17,r=a));const z=Zt();let{language:N="plaintext"}=n,{code:g=""}=n,{lineNumbers:y=!1}=n,{background:P="bg-neutral-900/90"}=n,{blur:I=""}=n,{text:p="text-sm"}=n,{color:k="text-white"}=n,{rounded:H="rounded-container-token"}=n,{shadow:x="shadow"}=n,{button:E="btn btn-sm variant-soft !text-white"}=n,{buttonLabel:W="Copy"}=n,{buttonCopied:q="👍"}=n,w=!1,L=g,O=!1;function _(){t(7,O=!0),setTimeout(()=>{t(7,O=!1)},2e3),z("copy")}return i.$$set=a=>{t(19,n=Ft(Ft({},n),Gt(a))),"language"in a&&t(0,N=a.language),"code"in a&&t(1,g=a.code),"lineNumbers"in a&&t(10,y=a.lineNumbers),"background"in a&&t(11,P=a.background),"blur"in a&&t(12,I=a.blur),"text"in a&&t(13,p=a.text),"color"in a&&t(14,k=a.color),"rounded"in a&&t(15,H=a.rounded),"shadow"in a&&t(16,x=a.shadow),"button"in a&&t(2,E=a.button),"buttonLabel"in a&&t(3,W=a.buttonLabel),"buttonCopied"in a&&t(4,q=a.buttonCopied)},i.$$.update=()=>{i.$$.dirty&131075&&r!==void 0&&(t(5,L=r.highlight(g,{language:N}).value.trim()),t(6,w=!0)),i.$$.dirty&1056&&y&&(t(5,L=L.replace(/^/gm,()=>'<span class="line"></span>	')),t(6,w=!0)),t(8,l=`${mn} ${P} ${I} ${p} ${k} ${H} ${x} ${n.class??""}`)},n=Gt(n),[N,g,E,W,q,L,w,O,l,_,y,P,I,p,k,H,x,r]}class $ extends Qt{constructor(n){super(),Xt(this,n,gn,hn,Jt,{language:0,code:1,lineNumbers:10,background:11,blur:12,text:13,color:14,rounded:15,shadow:16,button:2,buttonLabel:3,buttonCopied:4})}}function bn(i){let n,t,l,r,z="Collaborative Coding Chronicles: Mastering Git in a Scrum Team",N,g,y,P="1. Branching:",I,p,k,H="<b>Why:</b> Prevents the main codebase (usually main or master branch) from becoming unstable.",x,E,W="<b>How:</b> Create feature branches for each task/user story.",q,w,L,O="Example:",_,a,C,T,de,A,D,Be="2. Committing:",Ge,M,fe,It="Why: Keeps a record of changes and makes it easier to track what each change was about.",Ke,ge,Tt="How: Commit small, logically separate changes with descriptive messages.",Ve,F,Je,ee,Qe,te,Xe,be,Ye,ne,Ze,ve,Mt='<h2 class="h2">3. Pull Requests/Merge Requests:</h2> <ul class="mt-3 mx-14 list-disc"><li>Why: Facilitates code reviews, ensuring code quality and team awareness of changes.</li> <li>How: Open a pull request (PR) when you want to merge your branch into the main branch.</li> <li>Example: After completing the login feature, you submit a PR and request reviews from teammates.</li></ul>',$e,pe,St='<h2 class="h2">4. Code Reviews:</h2> <ul class="mt-3 mx-14 list-disc"><li>Why: Improves code quality, catches bugs, and shares knowledge across the team.</li> <li>How: Team members review and comment on the changes in PRs before merging.</li> <li>Example: A teammate might suggest improvements or ask for clarifications in your PR comments.</li></ul>',et,le,ae,Nt="5. Pulling & Merging:",tt,S,Ce,Pt="Why: Keeps your local branch up-to-date with the main branch.",nt,ye,Ot="How: Regularly pull from the main branch and handle any merge conflicts.",lt,_e,at,oe,ot,xe,st,se,it,we,Rt=`<h2 class="h2">6. Handling Merge Conflicts:</h2> <ul class="mt-3 mx-14 list-disc"><li>Why: Conflicts are inevitable when multiple people change code; resolving them is crucial.</li> <li>How: Understand both sides of the conflict and make necessary changes to integrate.</li> <li>Example: Manually edit files to resolve conflicts, then commit the resolved version.
          Some IDEs have tools to help with this.</li></ul>`,rt,ke,Bt='<h2 class="h2">7. Regular Commits &amp; Pushes:</h2> <ul class="mt-3 mx-14 list-disc"><li>Why: Prevents losing work and keeps teammates informed of your progress.</li> <li>How: Commit often and push to the remote branch.</li> <li>Example: At the end of each day, ensure your work is committed and pushed.</li></ul>',ct,ie,re,Wt="8. Tagging Releases:",ut,U,Ee,qt="Why: Marks specific points in the repository’s history as important, usually for releases.",ht,Le,At="How: Create tags for each sprint or version release.",mt,He,dt,ce,ft,ue,he,Dt="9. Using Git Stash:",gt,j,Ie,Ut="Why: Handy for switching branches without committing work-in-progress code.",bt,Te,jt="How: Stash changes before switching branches.",vt,Me,pt,me,qe;return T=new $({props:{class:"mt-1",language:"shell",code:"git checkout -b feature/login"}}),ee=new $({props:{class:"",language:"shell",code:"git add ."}}),te=new $({props:{class:"",language:"shell",code:"git add index.html"}}),ne=new $({props:{class:"",language:"shell",code:'git commit -m "Fix login form bug"'}}),oe=new $({props:{class:"mt-1",language:"shell",code:"git pull origin main"}}),se=new $({props:{class:"mt-1",language:"shell",code:"git merge main"}}),ce=new $({props:{class:"mt-1",language:"shell",code:`git tag -a v1.0 -m "Release version 1.0" 
git push origin --tags`}}),me=new $({props:{class:"mt-1",language:"shell",code:`git stash
git checkout other-branch
# Do some work
git checkout original-branch
git stash pop
`}}),{c(){n=u(),t=o("div"),l=o("div"),r=o("h1"),r.textContent=z,N=u(),g=o("section"),y=o("h2"),y.textContent=P,I=u(),p=o("ul"),k=o("li"),k.innerHTML=H,x=u(),E=o("li"),E.innerHTML=W,q=u(),w=o("li"),L=o("b"),L.textContent=O,_=R(" If you're working on a user story for a new login feature, you might do: "),a=o("br"),C=u(),V(T.$$.fragment),de=u(),A=o("section"),D=o("h2"),D.textContent=Be,Ge=u(),M=o("ul"),fe=o("li"),fe.textContent=It,Ke=u(),ge=o("li"),ge.textContent=Tt,Ve=u(),F=o("li"),Je=R(`Staging: Before committing, you need to stage the changes you want to commit.\r
          `),V(ee.$$.fragment),Qe=R(`\r
          Or you can stage specific files:\r
          `),V(te.$$.fragment),Xe=u(),be=o("li"),Ye=R(`Committing: After staging, you can commit your changes with a descriptive message.\r
          `),V(ne.$$.fragment),Ze=u(),ve=o("section"),ve.innerHTML=Mt,$e=u(),pe=o("section"),pe.innerHTML=St,et=u(),le=o("section"),ae=o("h2"),ae.textContent=Nt,tt=u(),S=o("ul"),Ce=o("li"),Ce.textContent=Pt,nt=u(),ye=o("li"),ye.textContent=Ot,lt=u(),_e=o("li"),at=R(`Example\r
          `),V(oe.$$.fragment),ot=u(),xe=o("li"),st=R(`When you are working on another branch, you might want to merge the main branch into your branch to keep it up-to-date.\r
          `),V(se.$$.fragment),it=u(),we=o("section"),we.innerHTML=Rt,rt=u(),ke=o("section"),ke.innerHTML=Bt,ct=u(),ie=o("section"),re=o("h2"),re.textContent=Wt,ut=u(),U=o("ul"),Ee=o("li"),Ee.textContent=qt,ht=u(),Le=o("li"),Le.textContent=At,mt=u(),He=o("li"),dt=R(`Example: After completing a sprint, you might tag the commit with the sprint number.\r
          `),V(ce.$$.fragment),ft=u(),ue=o("section"),he=o("h2"),he.textContent=Dt,gt=u(),j=o("ul"),Ie=o("li"),Ie.textContent=Ut,bt=u(),Te=o("li"),Te.textContent=jt,vt=u(),Me=o("li"),pt=R(`Example: If you're working on a feature branch and need to switch to another branch, you can stash your changes:\r
          `),V(me.$$.fragment),this.h()},l(m){on("svelte-15hy6wt",document.head).forEach(c),n=h(m),t=s(m,"DIV",{class:!0});var zt=d(t);l=s(zt,"DIV",{class:!0});var v=d(l);r=s(v,"H1",{class:!0,"data-svelte-h":!0}),b(r)!=="svelte-1tuyip8"&&(r.textContent=z),N=h(v),g=s(v,"SECTION",{});var Ae=d(g);y=s(Ae,"H2",{class:!0,"data-svelte-h":!0}),b(y)!=="svelte-167h494"&&(y.textContent=P),I=h(Ae),p=s(Ae,"UL",{class:!0});var Se=d(p);k=s(Se,"LI",{"data-svelte-h":!0}),b(k)!=="svelte-1anpdn0"&&(k.innerHTML=H),x=h(Se),E=s(Se,"LI",{"data-svelte-h":!0}),b(E)!=="svelte-17zl04b"&&(E.innerHTML=W),q=h(Se),w=s(Se,"LI",{});var Ne=d(w);L=s(Ne,"B",{"data-svelte-h":!0}),b(L)!=="svelte-s374z4"&&(L.textContent=O),_=B(Ne," If you're working on a user story for a new login feature, you might do: "),a=s(Ne,"BR",{}),C=h(Ne),J(T.$$.fragment,Ne),Ne.forEach(c),Se.forEach(c),Ae.forEach(c),de=h(v),A=s(v,"SECTION",{});var De=d(A);D=s(De,"H2",{class:!0,"data-svelte-h":!0}),b(D)!=="svelte-14gruss"&&(D.textContent=Be),Ge=h(De),M=s(De,"UL",{class:!0});var G=d(M);fe=s(G,"LI",{"data-svelte-h":!0}),b(fe)!=="svelte-1i4a1if"&&(fe.textContent=It),Ke=h(G),ge=s(G,"LI",{"data-svelte-h":!0}),b(ge)!=="svelte-gmq3q2"&&(ge.textContent=Tt),Ve=h(G),F=s(G,"LI",{});var We=d(F);Je=B(We,`Staging: Before committing, you need to stage the changes you want to commit.\r
          `),J(ee.$$.fragment,We),Qe=B(We,`\r
          Or you can stage specific files:\r
          `),J(te.$$.fragment,We),We.forEach(c),Xe=h(G),be=s(G,"LI",{});var yt=d(be);Ye=B(yt,`Committing: After staging, you can commit your changes with a descriptive message.\r
          `),J(ne.$$.fragment,yt),yt.forEach(c),G.forEach(c),De.forEach(c),Ze=h(v),ve=s(v,"SECTION",{"data-svelte-h":!0}),b(ve)!=="svelte-13t64cc"&&(ve.innerHTML=Mt),$e=h(v),pe=s(v,"SECTION",{"data-svelte-h":!0}),b(pe)!=="svelte-18ens80"&&(pe.innerHTML=St),et=h(v),le=s(v,"SECTION",{});var Ue=d(le);ae=s(Ue,"H2",{class:!0,"data-svelte-h":!0}),b(ae)!=="svelte-1l1abeo"&&(ae.textContent=Nt),tt=h(Ue),S=s(Ue,"UL",{class:!0});var K=d(S);Ce=s(K,"LI",{"data-svelte-h":!0}),b(Ce)!=="svelte-lee1c2"&&(Ce.textContent=Pt),nt=h(K),ye=s(K,"LI",{"data-svelte-h":!0}),b(ye)!=="svelte-14xyn9s"&&(ye.textContent=Ot),lt=h(K),_e=s(K,"LI",{});var _t=d(_e);at=B(_t,`Example\r
          `),J(oe.$$.fragment,_t),_t.forEach(c),ot=h(K),xe=s(K,"LI",{});var xt=d(xe);st=B(xt,`When you are working on another branch, you might want to merge the main branch into your branch to keep it up-to-date.\r
          `),J(se.$$.fragment,xt),xt.forEach(c),K.forEach(c),Ue.forEach(c),it=h(v),we=s(v,"SECTION",{"data-svelte-h":!0}),b(we)!=="svelte-adeend"&&(we.innerHTML=Rt),rt=h(v),ke=s(v,"SECTION",{"data-svelte-h":!0}),b(ke)!=="svelte-9dtse4"&&(ke.innerHTML=Bt),ct=h(v),ie=s(v,"SECTION",{});var je=d(ie);re=s(je,"H2",{class:!0,"data-svelte-h":!0}),b(re)!=="svelte-om2xbc"&&(re.textContent=Wt),ut=h(je),U=s(je,"UL",{class:!0});var Pe=d(U);Ee=s(Pe,"LI",{"data-svelte-h":!0}),b(Ee)!=="svelte-bmrhyb"&&(Ee.textContent=qt),ht=h(Pe),Le=s(Pe,"LI",{"data-svelte-h":!0}),b(Le)!=="svelte-1nv6c5h"&&(Le.textContent=At),mt=h(Pe),He=s(Pe,"LI",{});var wt=d(He);dt=B(wt,`Example: After completing a sprint, you might tag the commit with the sprint number.\r
          `),J(ce.$$.fragment,wt),wt.forEach(c),Pe.forEach(c),je.forEach(c),ft=h(v),ue=s(v,"SECTION",{});var ze=d(ue);he=s(ze,"H2",{class:!0,"data-svelte-h":!0}),b(he)!=="svelte-dv4zkf"&&(he.textContent=Dt),gt=h(ze),j=s(ze,"UL",{class:!0});var Oe=d(j);Ie=s(Oe,"LI",{"data-svelte-h":!0}),b(Ie)!=="svelte-39dne8"&&(Ie.textContent=Ut),bt=h(Oe),Te=s(Oe,"LI",{"data-svelte-h":!0}),b(Te)!=="svelte-7z6wcn"&&(Te.textContent=jt),vt=h(Oe),Me=s(Oe,"LI",{});var kt=d(Me);pt=B(kt,`Example: If you're working on a feature branch and need to switch to another branch, you can stash your changes:\r
          `),J(me.$$.fragment,kt),kt.forEach(c),Oe.forEach(c),ze.forEach(c),v.forEach(c),zt.forEach(c),this.h()},h(){document.title="Collaborative Coding Chronicles: Mastering Git in a Scrum Team",f(r,"class","h1"),f(y,"class","h2"),f(p,"class","list-disc mx-14 mt-3"),f(D,"class","h2"),f(M,"class","mt-3 mx-14 list-disc"),f(ae,"class","h2"),f(S,"class","mt-3 mx-14 list-disc"),f(re,"class","h2"),f(U,"class","mt-3 mx-14 list-disc"),f(he,"class","h2"),f(j,"class","mt-3 mx-14 list-disc"),f(l,"class","flex flex-col gap-5"),f(t,"class","flex gap-3 flex-col")},m(m,Ct){Re(m,n,Ct),Re(m,t,Ct),e(t,l),e(l,r),e(l,N),e(l,g),e(g,y),e(g,I),e(g,p),e(p,k),e(p,x),e(p,E),e(p,q),e(p,w),e(w,L),e(w,_),e(w,a),e(w,C),Q(T,w,null),e(l,de),e(l,A),e(A,D),e(A,Ge),e(A,M),e(M,fe),e(M,Ke),e(M,ge),e(M,Ve),e(M,F),e(F,Je),Q(ee,F,null),e(F,Qe),Q(te,F,null),e(M,Xe),e(M,be),e(be,Ye),Q(ne,be,null),e(l,Ze),e(l,ve),e(l,$e),e(l,pe),e(l,et),e(l,le),e(le,ae),e(le,tt),e(le,S),e(S,Ce),e(S,nt),e(S,ye),e(S,lt),e(S,_e),e(_e,at),Q(oe,_e,null),e(S,ot),e(S,xe),e(xe,st),Q(se,xe,null),e(l,it),e(l,we),e(l,rt),e(l,ke),e(l,ct),e(l,ie),e(ie,re),e(ie,ut),e(ie,U),e(U,Ee),e(U,ht),e(U,Le),e(U,mt),e(U,He),e(He,dt),Q(ce,He,null),e(l,ft),e(l,ue),e(ue,he),e(ue,gt),e(ue,j),e(j,Ie),e(j,bt),e(j,Te),e(j,vt),e(j,Me),e(Me,pt),Q(me,Me,null),qe=!0},p:Lt,i(m){qe||(X(T.$$.fragment,m),X(ee.$$.fragment,m),X(te.$$.fragment,m),X(ne.$$.fragment,m),X(oe.$$.fragment,m),X(se.$$.fragment,m),X(ce.$$.fragment,m),X(me.$$.fragment,m),qe=!0)},o(m){Y(T.$$.fragment,m),Y(ee.$$.fragment,m),Y(te.$$.fragment,m),Y(ne.$$.fragment,m),Y(oe.$$.fragment,m),Y(se.$$.fragment,m),Y(ce.$$.fragment,m),Y(me.$$.fragment,m),qe=!1},d(m){m&&(c(n),c(t)),Z(T),Z(ee),Z(te),Z(ne),Z(oe),Z(se),Z(ce),Z(me)}}}class yn extends Qt{constructor(n){super(),Xt(this,n,null,bn,Jt,{})}}export{yn as component};
