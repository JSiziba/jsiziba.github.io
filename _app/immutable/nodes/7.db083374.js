import{s as Bt,a,f as t,l as $,F as Ut,d as i,c as l,g as n,h,u as r,m as b,j as m,i as Nt,v as e,B as zt}from"../chunks/scheduler.d8ec4c9c.js";import{S as Dt,i as Ft,b as w,d as _,m as E,a as I,t as L,e as k}from"../chunks/index.f60eb3ad.js";import"../chunks/ProgressBar.svelte_svelte_type_style_lang.7c14f914.js";import{C as H}from"../chunks/CodeBlock.3792ad78.js";function Gt(At){let Q,T,o,M,vt="Collaborative Coding Chronicles: Mastering Git in a Scrum Team",ke,S,O,pt="1. Branching:",He,d,X,xt="<b>Why:</b> Prevents the main codebase (usually main or master branch) from becoming unstable.",Te,Y,Ct="<b>How:</b> Create feature branches for each task/user story.",Me,p,Z,yt="Example:",Se,Oe,Re,R,We,W,P,$t="2. Committing:",Pe,u,ee,bt="Why: Keeps a record of changes and makes it easier to track what each change was about.",qe,te,wt="How: Commit small, logically separate changes with descriptive messages.",Ne,x,Ae,q,Be,N,Ue,ne,ze,A,De,ae,_t='<h2 class="h2">3. Pull Requests/Merge Requests:</h2> <ul class="mt-3 mx-14 list-disc"><li>Why: Facilitates code reviews, ensuring code quality and team awareness of changes.</li> <li>How: Open a pull request (PR) when you want to merge your branch into the main branch.</li> <li>Example: After completing the login feature, you submit a PR and request reviews from teammates.</li></ul>',Fe,le,Et='<h2 class="h2">4. Code Reviews:</h2> <ul class="mt-3 mx-14 list-disc"><li>Why: Improves code quality, catches bugs, and shares knowledge across the team.</li> <li>How: Team members review and comment on the changes in PRs before merging.</li> <li>Example: A teammate might suggest improvements or ask for clarifications in your PR comments.</li></ul>',Ge,B,U,It="5. Pulling & Merging:",Ke,g,se,Lt="Why: Keeps your local branch up-to-date with the main branch.",Ve,oe,kt="How: Regularly pull from the main branch and handle any merge conflicts.",je,ie,Je,z,Qe,re,Xe,D,Ye,ce,Ht=`<h2 class="h2">6. Handling Merge Conflicts:</h2> <ul class="mt-3 mx-14 list-disc"><li>Why: Conflicts are inevitable when multiple people change code; resolving them is crucial.</li> <li>How: Understand both sides of the conflict and make necessary changes to integrate.</li> <li>Example: Manually edit files to resolve conflicts, then commit the resolved version.
          Some IDEs have tools to help with this.</li></ul>`,Ze,he,Tt='<h2 class="h2">7. Regular Commits &amp; Pushes:</h2> <ul class="mt-3 mx-14 list-disc"><li>Why: Prevents losing work and keeps teammates informed of your progress.</li> <li>How: Commit often and push to the remote branch.</li> <li>Example: At the end of each day, ensure your work is committed and pushed.</li></ul>',et,F,G,Mt="8. Tagging Releases:",tt,f,me,St="Why: Marks specific points in the repositoryâ€™s history as important, usually for releases.",nt,ue,Ot="How: Create tags for each sprint or version release.",at,ge,lt,K,st,V,j,Rt="9. Using Git Stash:",ot,v,de,Wt="Why: Handy for switching branches without committing work-in-progress code.",it,fe,Pt="How: Stash changes before switching branches.",rt,ve,ct,J,be;return R=new H({props:{class:"mt-1",language:"shell",code:"git checkout -b feature/login"}}),q=new H({props:{class:"",language:"shell",code:"git add ."}}),N=new H({props:{class:"",language:"shell",code:"git add index.html"}}),A=new H({props:{class:"",language:"shell",code:'git commit -m "Fix login form bug"'}}),z=new H({props:{class:"mt-1",language:"shell",code:"git pull origin main"}}),D=new H({props:{class:"mt-1",language:"shell",code:"git merge main"}}),K=new H({props:{class:"mt-1",language:"shell",code:`git tag -a v1.0 -m "Release version 1.0" 
git push origin --tags`}}),J=new H({props:{class:"mt-1",language:"shell",code:`git stash
git checkout other-branch
# Do some work
git checkout original-branch
git stash pop
`}}),{c(){Q=a(),T=t("div"),o=t("div"),M=t("h1"),M.textContent=vt,ke=a(),S=t("section"),O=t("h2"),O.textContent=pt,He=a(),d=t("ul"),X=t("li"),X.innerHTML=xt,Te=a(),Y=t("li"),Y.innerHTML=Ct,Me=a(),p=t("li"),Z=t("b"),Z.textContent=yt,Se=$(" If you're working on a user story for a new login feature, you might do: "),Oe=t("br"),Re=a(),w(R.$$.fragment),We=a(),W=t("section"),P=t("h2"),P.textContent=$t,Pe=a(),u=t("ul"),ee=t("li"),ee.textContent=bt,qe=a(),te=t("li"),te.textContent=wt,Ne=a(),x=t("li"),Ae=$(`Staging: Before committing, you need to stage the changes you want to commit.\r
          `),w(q.$$.fragment),Be=$(`\r
          Or you can stage specific files:\r
          `),w(N.$$.fragment),Ue=a(),ne=t("li"),ze=$(`Committing: After staging, you can commit your changes with a descriptive message.\r
          `),w(A.$$.fragment),De=a(),ae=t("section"),ae.innerHTML=_t,Fe=a(),le=t("section"),le.innerHTML=Et,Ge=a(),B=t("section"),U=t("h2"),U.textContent=It,Ke=a(),g=t("ul"),se=t("li"),se.textContent=Lt,Ve=a(),oe=t("li"),oe.textContent=kt,je=a(),ie=t("li"),Je=$(`Example\r
          `),w(z.$$.fragment),Qe=a(),re=t("li"),Xe=$(`When you are working on another branch, you might want to merge the main branch into your branch to keep it up-to-date.\r
          `),w(D.$$.fragment),Ye=a(),ce=t("section"),ce.innerHTML=Ht,Ze=a(),he=t("section"),he.innerHTML=Tt,et=a(),F=t("section"),G=t("h2"),G.textContent=Mt,tt=a(),f=t("ul"),me=t("li"),me.textContent=St,nt=a(),ue=t("li"),ue.textContent=Ot,at=a(),ge=t("li"),lt=$(`Example: After completing a sprint, you might tag the commit with the sprint number.\r
          `),w(K.$$.fragment),st=a(),V=t("section"),j=t("h2"),j.textContent=Rt,ot=a(),v=t("ul"),de=t("li"),de.textContent=Wt,it=a(),fe=t("li"),fe.textContent=Pt,rt=a(),ve=t("li"),ct=$(`Example: If you're working on a feature branch and need to switch to another branch, you can stash your changes:\r
          `),w(J.$$.fragment),this.h()},l(s){Ut("svelte-15hy6wt",document.head).forEach(i),Q=l(s),T=n(s,"DIV",{class:!0});var qt=h(T);o=n(qt,"DIV",{class:!0});var c=h(o);M=n(c,"H1",{class:!0,"data-svelte-h":!0}),r(M)!=="svelte-1tuyip8"&&(M.textContent=vt),ke=l(c),S=n(c,"SECTION",{});var we=h(S);O=n(we,"H2",{class:!0,"data-svelte-h":!0}),r(O)!=="svelte-167h494"&&(O.textContent=pt),He=l(we),d=n(we,"UL",{class:!0});var pe=h(d);X=n(pe,"LI",{"data-svelte-h":!0}),r(X)!=="svelte-1anpdn0"&&(X.innerHTML=xt),Te=l(pe),Y=n(pe,"LI",{"data-svelte-h":!0}),r(Y)!=="svelte-17zl04b"&&(Y.innerHTML=Ct),Me=l(pe),p=n(pe,"LI",{});var xe=h(p);Z=n(xe,"B",{"data-svelte-h":!0}),r(Z)!=="svelte-s374z4"&&(Z.textContent=yt),Se=b(xe," If you're working on a user story for a new login feature, you might do: "),Oe=n(xe,"BR",{}),Re=l(xe),_(R.$$.fragment,xe),xe.forEach(i),pe.forEach(i),we.forEach(i),We=l(c),W=n(c,"SECTION",{});var _e=h(W);P=n(_e,"H2",{class:!0,"data-svelte-h":!0}),r(P)!=="svelte-14gruss"&&(P.textContent=$t),Pe=l(_e),u=n(_e,"UL",{class:!0});var C=h(u);ee=n(C,"LI",{"data-svelte-h":!0}),r(ee)!=="svelte-1i4a1if"&&(ee.textContent=bt),qe=l(C),te=n(C,"LI",{"data-svelte-h":!0}),r(te)!=="svelte-gmq3q2"&&(te.textContent=wt),Ne=l(C),x=n(C,"LI",{});var $e=h(x);Ae=b($e,`Staging: Before committing, you need to stage the changes you want to commit.\r
          `),_(q.$$.fragment,$e),Be=b($e,`\r
          Or you can stage specific files:\r
          `),_(N.$$.fragment,$e),$e.forEach(i),Ue=l(C),ne=n(C,"LI",{});var mt=h(ne);ze=b(mt,`Committing: After staging, you can commit your changes with a descriptive message.\r
          `),_(A.$$.fragment,mt),mt.forEach(i),C.forEach(i),_e.forEach(i),De=l(c),ae=n(c,"SECTION",{"data-svelte-h":!0}),r(ae)!=="svelte-13t64cc"&&(ae.innerHTML=_t),Fe=l(c),le=n(c,"SECTION",{"data-svelte-h":!0}),r(le)!=="svelte-18ens80"&&(le.innerHTML=Et),Ge=l(c),B=n(c,"SECTION",{});var Ee=h(B);U=n(Ee,"H2",{class:!0,"data-svelte-h":!0}),r(U)!=="svelte-1l1abeo"&&(U.textContent=It),Ke=l(Ee),g=n(Ee,"UL",{class:!0});var y=h(g);se=n(y,"LI",{"data-svelte-h":!0}),r(se)!=="svelte-lee1c2"&&(se.textContent=Lt),Ve=l(y),oe=n(y,"LI",{"data-svelte-h":!0}),r(oe)!=="svelte-14xyn9s"&&(oe.textContent=kt),je=l(y),ie=n(y,"LI",{});var ut=h(ie);Je=b(ut,`Example\r
          `),_(z.$$.fragment,ut),ut.forEach(i),Qe=l(y),re=n(y,"LI",{});var gt=h(re);Xe=b(gt,`When you are working on another branch, you might want to merge the main branch into your branch to keep it up-to-date.\r
          `),_(D.$$.fragment,gt),gt.forEach(i),y.forEach(i),Ee.forEach(i),Ye=l(c),ce=n(c,"SECTION",{"data-svelte-h":!0}),r(ce)!=="svelte-adeend"&&(ce.innerHTML=Ht),Ze=l(c),he=n(c,"SECTION",{"data-svelte-h":!0}),r(he)!=="svelte-9dtse4"&&(he.innerHTML=Tt),et=l(c),F=n(c,"SECTION",{});var Ie=h(F);G=n(Ie,"H2",{class:!0,"data-svelte-h":!0}),r(G)!=="svelte-om2xbc"&&(G.textContent=Mt),tt=l(Ie),f=n(Ie,"UL",{class:!0});var Ce=h(f);me=n(Ce,"LI",{"data-svelte-h":!0}),r(me)!=="svelte-bmrhyb"&&(me.textContent=St),nt=l(Ce),ue=n(Ce,"LI",{"data-svelte-h":!0}),r(ue)!=="svelte-1nv6c5h"&&(ue.textContent=Ot),at=l(Ce),ge=n(Ce,"LI",{});var dt=h(ge);lt=b(dt,`Example: After completing a sprint, you might tag the commit with the sprint number.\r
          `),_(K.$$.fragment,dt),dt.forEach(i),Ce.forEach(i),Ie.forEach(i),st=l(c),V=n(c,"SECTION",{});var Le=h(V);j=n(Le,"H2",{class:!0,"data-svelte-h":!0}),r(j)!=="svelte-dv4zkf"&&(j.textContent=Rt),ot=l(Le),v=n(Le,"UL",{class:!0});var ye=h(v);de=n(ye,"LI",{"data-svelte-h":!0}),r(de)!=="svelte-39dne8"&&(de.textContent=Wt),it=l(ye),fe=n(ye,"LI",{"data-svelte-h":!0}),r(fe)!=="svelte-7z6wcn"&&(fe.textContent=Pt),rt=l(ye),ve=n(ye,"LI",{});var ft=h(ve);ct=b(ft,`Example: If you're working on a feature branch and need to switch to another branch, you can stash your changes:\r
          `),_(J.$$.fragment,ft),ft.forEach(i),ye.forEach(i),Le.forEach(i),c.forEach(i),qt.forEach(i),this.h()},h(){document.title="Collaborative Coding Chronicles: Mastering Git in a Scrum Team",m(M,"class","h1"),m(O,"class","h2"),m(d,"class","list-disc mx-14 mt-3"),m(P,"class","h2"),m(u,"class","mt-3 mx-14 list-disc"),m(U,"class","h2"),m(g,"class","mt-3 mx-14 list-disc"),m(G,"class","h2"),m(f,"class","mt-3 mx-14 list-disc"),m(j,"class","h2"),m(v,"class","mt-3 mx-14 list-disc"),m(o,"class","flex flex-col gap-5"),m(T,"class","flex gap-3 flex-col")},m(s,ht){Nt(s,Q,ht),Nt(s,T,ht),e(T,o),e(o,M),e(o,ke),e(o,S),e(S,O),e(S,He),e(S,d),e(d,X),e(d,Te),e(d,Y),e(d,Me),e(d,p),e(p,Z),e(p,Se),e(p,Oe),e(p,Re),E(R,p,null),e(o,We),e(o,W),e(W,P),e(W,Pe),e(W,u),e(u,ee),e(u,qe),e(u,te),e(u,Ne),e(u,x),e(x,Ae),E(q,x,null),e(x,Be),E(N,x,null),e(u,Ue),e(u,ne),e(ne,ze),E(A,ne,null),e(o,De),e(o,ae),e(o,Fe),e(o,le),e(o,Ge),e(o,B),e(B,U),e(B,Ke),e(B,g),e(g,se),e(g,Ve),e(g,oe),e(g,je),e(g,ie),e(ie,Je),E(z,ie,null),e(g,Qe),e(g,re),e(re,Xe),E(D,re,null),e(o,Ye),e(o,ce),e(o,Ze),e(o,he),e(o,et),e(o,F),e(F,G),e(F,tt),e(F,f),e(f,me),e(f,nt),e(f,ue),e(f,at),e(f,ge),e(ge,lt),E(K,ge,null),e(o,st),e(o,V),e(V,j),e(V,ot),e(V,v),e(v,de),e(v,it),e(v,fe),e(v,rt),e(v,ve),e(ve,ct),E(J,ve,null),be=!0},p:zt,i(s){be||(I(R.$$.fragment,s),I(q.$$.fragment,s),I(N.$$.fragment,s),I(A.$$.fragment,s),I(z.$$.fragment,s),I(D.$$.fragment,s),I(K.$$.fragment,s),I(J.$$.fragment,s),be=!0)},o(s){L(R.$$.fragment,s),L(q.$$.fragment,s),L(N.$$.fragment,s),L(A.$$.fragment,s),L(z.$$.fragment,s),L(D.$$.fragment,s),L(K.$$.fragment,s),L(J.$$.fragment,s),be=!1},d(s){s&&(i(Q),i(T)),k(R),k(q),k(N),k(A),k(z),k(D),k(K),k(J)}}}class Qt extends Dt{constructor(Q){super(),Ft(this,Q,null,Gt,Bt,{})}}export{Qt as component};
